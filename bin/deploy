#!/bin/bash

set -e
CWD="$(dirname "$(readlink -f "$0")")"
ROOT_DIR="$CWD/../../../../"
source "$ROOT_DIR/config/bosh-config"

ENV_NAME="$1"

SHARED_DIR="shared" #inside $PROJECT_DIR
RELEASE_CURRENT="current" #inside $PROJECT_DIR
RELEASE_THIS="releases/$(date +"%s")" #inside PROJECT_DIR
LOG_FILE="log.txt"
BUILD_LOCATION="./dist"

if [ -z "$ENV_NAME" ]
then
	echo "*** Aborting. No environment set"
	exit 1
fi

ENV_FILE="config/environments/$ENV_NAME.env"
if [ ! -e "$ENV_FILE" ]
then
	echo "*** Aborting. Environment file does not exist $ENV_FILE"
	exit 1
fi

source "$ENV_FILE"

GITISH=$2

if [ -z "$GITISH" ]
then
	echo "Aborting. No gitish set"
	exit 1
fi

GIT_HASH="$(git rev-parse --quiet --verify $GITISH)"

if [ -z "$GIT_HASH" ]
then
	echo "Aborting. Cannot find $GITISH"
	exit 1
fi

START=$(date +%s)

REMOTE_SSH=$USERNAME@$HOSTNAME
# SSH into the server, and check project directory exists. (will need to be made manually and given r+w permissions
echo "*** Testing connection to $REMOTE_SSH"
ssh $SSH_OPTIONS $REMOTE_SSH "cd $PROJECT_DIR"
echo "*** Connected successfully"

echo "Deploy $RELEASE_THIS to $ENV_while read LINE; doNAME ($REMOTE_SSH/$PROJECT_DIR) started at $(date)"
echo
echo "*** Preparing build"

# checkout
echo
echo "    - Checking out $GITISH ($GIT_HASH) locally to $BUILD_LOCATION"
rm -rf $BUILD_LOCATION
mkdir -p $BUILD_LOCATION
git --work-tree=$BUILD_LOCATION checkout $GITISH -- .

if [ "$DOING_BOSH_DEVELOPMENT" = "true" ] && [ "$DESTINATION_ENV_NAME" != "production" ]
then
	echo -e "    - \e[30;43m WARN: [Doing Bosh Dev] Creating working repo patch \e[0m"
	git --no-pager diff > ${BUILD_LOCATION}/git.workingPatchFromParent.patch
	cp -R .git ${BUILD_LOCATION}/
	echo -e "    - \e[30;43m WARN: [Doing Bosh Dev] Applying working repo patch to $BUILD_LOCATION \e[0m"
	WHERE_ON_EARTH=`pwd`
	cd ${BUILD_LOCATION};
	git apply git.workingPatchFromParent.patch;
	rm -rf .git/;
	rm -rf git.workingPatchFromParent.patch;
	cd ${WHERE_ON_EARTH};
fi

if [ ! -z "$BUILD_SCRIPT" ]
then
	# build
	echo "    - Running local build tool ('$BUILD_SCRIPT')"
	echo "    --------------------------------------------------"
	echo "    $(cd $BUILD_LOCATION; $BUILD_SCRIPT)"
	echo "    --------------------------------------------------"
	echo
fi

# copy
rm -f dist.tar.gz
echo "*** Deploying to $REMOTE_SSH:$PROJECT_DIR/$RELEASE_THIS"
echo " - Preparing target"
ssh $SSH_OPTIONS $REMOTE_SSH "cd $PROJECT_DIR && rm -rf $RELEASE_THIS"

echo " - Copying $(du -sh $BUILD_LOCATION | awk '{print $1}') of files (this may take some time)"

# remove excluded files and directories from build
for i in "${EXCLUDE_FROM_BUILD[@]}"; do
    rm -rf $BUILD_LOCATION/$i
done

tar -zcf dist.tar.gz $BUILD_LOCATION
scp -r $SCP_OPTIONS dist.tar.gz $REMOTE_SSH:$PROJECT_DIR
ssh $SSH_OPTIONS $REMOTE_SSH "cd $PROJECT_DIR && tar -zxf dist.tar.gz . && rm -f dist.tar.gz && mv $BUILD_LOCATION $RELEASE_THIS "

# switch symlink in 1 atomic operation
echo
echo "*** Publishing"
echo " - Linking shared paths, running pre-publish script, switching symlink and running post-publish script"

UPDATE_SHARED_PATHS_CMD="true"
for i in "${SHARED_PATHS[@]}"; do
    # remove symlinks and recreate symlinks
	UPDATE_SHARED_PATHS_CMD="$UPDATE_SHARED_PATHS_CMD && \
	rm -rf $PROJECT_DIR/$RELEASE_THIS/$i && \
	ln -s $PROJECT_DIR/$SHARED_DIR/$i $PROJECT_DIR/$RELEASE_THIS/$i"
done

TIMESTAMP=$(date +%Y"-"%m"-"%d" "%H"-"%M"-"%S)

DEPLOY_CMD="cd $PROJECT_DIR && \
	$UPDATE_SHARED_PATHS_CMD && \
	(cd $RELEASE_THIS && $PRE_PUBLISH) && \
	ln -s $RELEASE_THIS current_tmp && mv -Tf current_tmp $RELEASE_CURRENT && \
	(cd $PROJECT_DIR/$RELEASE_CURRENT && $POST_PUBLISH) && \
	echo '$RELEASE_THIS $GIT_HASH $GITISH $TIMESTAMP' >> $PROJECT_DIR/$LOG_FILE"

#echo "Deploy command:"
#echo $DEPLOY_CMD

echo
echo "-----------------------------------------------------------------------------"


ssh $SSH_OPTIONS $REMOTE_SSH $DEPLOY_CMD

echo "-----------------------------------------------------------------------------"

rm -rf $BUILD_LOCATION/
rm $BUILD_LOCATION.tar.gz

END=$(date +%s)

DIFF=$(echo "$END - $START" | bc)

echo "*** Completed in $DIFF Seconds"
